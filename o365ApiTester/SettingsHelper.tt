<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="Microsoft.VisualBasic" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>

<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualBasic" #>
<#@ template language="C#" debug="True" hostspecific="True"  #>
<#@ output extension=".Generated.cs" #>
<#
var hostServiceProvider = (IServiceProvider)Host;
var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
var activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
var templateDir = Path.GetDirectoryName(Host.TemplateFile);
var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
fullPath = 
    fullPath.EndsWith("\\") 
        ? fullPath.Substring(0, fullPath.Length-1) 
        : fullPath;
var subNamespace = 
    templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
    var projectNamespace = string.Concat(defaultNamespace, subNamespace);
    var className = "SiteSettings";
	List<string> configFiles = new List<string>(System.IO.Directory.EnumerateFiles(fullPath, "app.config", System.IO.SearchOption.AllDirectories ));
   configFiles.AddRange(System.IO.Directory.EnumerateFiles(fullPath, "web.config", System.IO.SearchOption.AllDirectories ));
    
	foreach(var file in configFiles)
	{
		Init(file);
	}

#>
//------------------------------------------------------------------------------
// FileName = <#= path #>
// Generated at <#= DateTime.Now.ToLocalTime() #>
//
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//    NOTE: Please use the Add a Reference to System.Configuration assembly if 
//          you get compile errors with ConfigurationManager
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;

namespace <#= projectNamespace #>
{
    /// <remarks>
    /// You can create partial class with the same name in another file to add custom properties
    /// </remarks>
    public static partial class <#= className #> 
    {
        /// <summary>
        /// Static constructor to initialize properties
        /// </summary>
        static <#= className #>()
        {
            var settings = System.Configuration.ConfigurationManager.AppSettings;
<#= AddToCostructor(path) #>        }

<#= RenderApplicationSettings(path) #>  }
}

<#+ 
    string path = "";
    XDocument doc = null;

    public void Init(string fileName)
	{
        try
		{
           path = Host.ResolvePath(fileName);
		if (File.Exists(path)) {
			doc = XDocument.Load(path);
		}
		}
        catch{
            path = "<< App.config or Web.config not found within the project >>";
			}
           
    }

	public string AddToCostructor(string path)
	{
		if (doc == null)
			return "";

		StringBuilder sb = new StringBuilder();

	foreach (XElement result in doc.XPathSelectElements("./configuration/appSettings/add") )
	  {
			sb.Append("\t").Append("\t").Append("\t");
			var key = result.Attribute(XName.Get("key")).Value;
			key = key.Substring(0,1).ToUpper() + key.Substring(1);
			sb.AppendFormat("\t{0} = {1} settings[\"{0}\"];", cleanUpNames(key) , GetConverter(key));
			sb.AppendLine();
		}

		return sb.ToString();

	}

   private string cleanUpNames(string name)
   {
	return Regex.Replace(name, @"\W", "_");
   }
   	public string RenderApplicationSettings(string path)
	{
		if (doc == null)
			return "";

		StringBuilder sb = new StringBuilder();

		foreach (XElement result in doc.XPathSelectElements("./configuration/appSettings/add")) {
			var key = cleanUpNames(result.Attribute(XName.Get("key")).Value);
			key = key.Substring(0,1).ToUpper() + key.Substring(1);
			var value = result.Attribute(XName.Get("value")).Value;
			sb.Append(Constants.vbTab).Append(Constants.vbTab);
			sb.Append("/// <summary>").AppendLine();
			sb.Append(Constants.vbTab).Append(Constants.vbTab);
			sb.AppendLine(string.Format(@"/// {0} configuration value", key));
			sb.Append(Constants.vbTab).Append(Constants.vbTab);
			sb.Append("/// </summary>").AppendLine();
			sb.Append(Constants.vbTab).Append(Constants.vbTab);
			sb.AppendFormat("public static {0} {1} ", GetPropertyType(value), key);
			sb.AppendLine();
		 sb.AppendLine("\t\t{\r\n\t\t\tget;\r\n\t\t}");
		}

		return sb.ToString();

	}

	public static string GetConverter(string prop)
	{
		if (Information.IsNumeric(prop))
			return "Convert.ToInt32";
		if (Information.IsDate(prop))
			return "Convert.ToDateTime";
		bool b = false;
		if (bool.TryParse(prop, out b))
			return "Convert.ToBoolean";
		return "";
	}

	public static string GetPropertyType(string prop)
	{
		if (Information.IsNumeric(prop))
			return "int";
		if (Information.IsDate(prop))
			return "DateTime";
		bool b = false;
		if (bool.TryParse(prop, out b))
			return "bool";
		return "string";
	}
	#>